#!/usr/bin/env python3
"""
üîç CompactPDF - Verifica√ß√£o do Sistema

Script de diagn√≥stico que verifica se todos os componentes do CompactPDF
est√£o funcionando corretamente, incluindo depend√™ncias, imports e funcionalidades b√°sicas.

Execute: python check_system.py
"""

import sys
import os
import traceback
from pathlib import Path
from typing import List, Dict, Any, Tuple

# Configurar path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root / 'src'))

def print_header(title: str, char: str = "=") -> None:
    """Imprime cabe√ßalho formatado."""
    print(f"\\n{char * 60}")
    print(f"üîç {title}")
    print(f"{char * 60}")

def print_check(description: str, status: bool, details: str = "") -> None:
    """Imprime resultado de verifica√ß√£o."""
    emoji = "‚úÖ" if status else "‚ùå"
    print(f"{emoji} {description}")
    if details:
        print(f"   ‚ÑπÔ∏è  {details}")

def check_python_version() -> Tuple[bool, str]:
    """Verifica vers√£o do Python."""
    version = sys.version_info
    required = (3, 9)
    
    if version >= required:
        return True, f"Python {version.major}.{version.minor}.{version.micro}"
    else:
        return False, f"Python {version.major}.{version.minor}.{version.micro} (requer 3.9+)"

def check_dependencies() -> List[Tuple[str, bool, str]]:
    """Verifica depend√™ncias obrigat√≥rias."""
    dependencies = [
        ("PyPDF2", "import PyPDF2"),
        ("Pillow", "from PIL import Image"),
        ("reportlab", "from reportlab.pdfgen import canvas"),
        ("numpy", "import numpy"),
        ("tqdm", "import tqdm"),
        ("psutil", "import psutil"),
    ]
    
    results = []
    for name, import_cmd in dependencies:
        try:
            exec(import_cmd)
            results.append((name, True, "Instalado"))
        except ImportError as e:
            results.append((name, False, f"N√£o encontrado: {e}"))
        except Exception as e:
            results.append((name, False, f"Erro: {e}"))
    
    return results

def check_project_structure() -> List[Tuple[str, bool, str]]:
    """Verifica estrutura do projeto."""
    required_paths = [
        "src/",
        "src/interfaces/",
        "src/strategies/",
        "src/services/", 
        "src/config/",
        "src/utils/",
        "src/pdf_compressor.py",
        "main.py",
        "demo.py",
        "requirements.txt",
        "README.md"
    ]
    
    results = []
    for path in required_paths:
        full_path = project_root / path
        exists = full_path.exists()
        
        if exists:
            if full_path.is_dir():
                file_count = len(list(full_path.rglob("*.py")))
                details = f"Diret√≥rio com {file_count} arquivos Python"
            else:
                size = full_path.stat().st_size
                details = f"Arquivo ({size:,} bytes)"
        else:
            details = "N√£o encontrado"
        
        results.append((path, exists, details))
    
    return results

def check_imports() -> List[Tuple[str, bool, str]]:
    """Verifica imports principais do projeto."""
    imports_to_test = [
        ("src", "import src"),
        ("PDFCompressorFacade", "from src import PDFCompressorFacade"),
        ("CompressionConfig", "from src.config import CompressionConfig"),
        ("Estrat√©gias", "from src.strategies import ImageCompressionStrategy, FontOptimizationStrategy, ContentOptimizationStrategy, AdaptiveCompressionStrategy"),
        ("Utils Avan√ßados", "from src.utils import ImageQualityAssessor, CompressionCache, BackupManager, CompressionAnalytics"),
        ("Interfaces", "from src.interfaces import ICompressionStrategy"),
    ]
    
    results = []
    for name, import_cmd in imports_to_test:
        try:
            exec(import_cmd)
            results.append((name, True, "Import bem-sucedido"))
        except ImportError as e:
            results.append((name, False, f"Erro de import: {e}"))
        except Exception as e:
            results.append((name, False, f"Erro: {e}"))
    
    return results

def test_basic_functionality() -> List[Tuple[str, bool, str]]:
    """Testa funcionalidades b√°sicas."""
    results = []
    
    try:
        # Teste 1: Criar configura√ß√£o
        from src.config import CompressionConfig
        config = CompressionConfig()
        results.append(("Cria√ß√£o de Config", True, f"Config criada com sucesso"))
    except Exception as e:
        results.append(("Cria√ß√£o de Config", False, str(e)))
    
    try:
        # Teste 2: Instanciar estrat√©gias
        from src.strategies import AdaptiveCompressionStrategy
        strategy = AdaptiveCompressionStrategy()
        name = strategy.get_strategy_name()
        results.append(("Estrat√©gia Adaptativa", True, f"Estrat√©gia: {name}"))
    except Exception as e:
        results.append(("Estrat√©gia Adaptativa", False, str(e)))
    
    try:
        # Teste 3: Utils avan√ßados
        from src.utils import ImageQualityAssessor
        assessor = ImageQualityAssessor()
        results.append(("Utils Avan√ßados", True, "ImageQualityAssessor criado"))
    except Exception as e:
        results.append(("Utils Avan√ßados", False, str(e)))
    
    try:
        # Teste 4: Cache
        from src.utils import CompressionCache
        cache = CompressionCache(str(Path("test_cache")))
        results.append(("Sistema de Cache", True, "Cache inicializado"))
    except Exception as e:
        results.append(("Sistema de Cache", False, str(e)))
    
    try:
        # Teste 5: Analytics
        from src.utils import CompressionAnalytics
        analytics = CompressionAnalytics(str(Path("test_analytics")))
        results.append(("Sistema de Analytics", True, "Analytics inicializado"))
    except Exception as e:
        results.append(("Sistema de Analytics", False, str(e)))
    
    return results

def test_pdf_creation() -> Tuple[bool, str]:
    """Testa cria√ß√£o de PDF de exemplo."""
    try:
        from reportlab.pdfgen import canvas
        from reportlab.lib.pagesizes import letter
        
        test_pdf_path = project_root / "test_document.pdf"
        
        # Criar PDF simples
        c = canvas.Canvas(str(test_pdf_path), pagesize=letter)
        c.setFont("Helvetica", 12)
        c.drawString(100, 750, "Teste do CompactPDF - Sistema funcionando!")
        c.save()
        
        # Verificar se foi criado
        if test_pdf_path.exists():
            size = test_pdf_path.stat().st_size
            # Limpar arquivo de teste
            test_pdf_path.unlink()
            return True, f"PDF criado com sucesso ({size:,} bytes)"
        else:
            return False, "PDF n√£o foi criado"
            
    except Exception as e:
        return False, f"Erro: {e}"

def test_main_cli() -> Tuple[bool, str]:
    """Testa se a CLI principal pode ser carregada."""
    try:
        # Tentar importar o main como m√≥dulo
        import importlib.util
        spec = importlib.util.spec_from_file_location("main", project_root / "main.py")
        
        if spec and spec.loader:
            main_module = importlib.util.module_from_spec(spec)
            # N√£o executar, apenas verificar se carrega
            return True, "CLI principal carrega sem erros"
        else:
            return False, "N√£o foi poss√≠vel carregar main.py"
            
    except Exception as e:
        return False, f"Erro ao carregar CLI: {e}"

def check_permissions() -> List[Tuple[str, bool, str]]:
    """Verifica permiss√µes necess√°rias."""
    results = []
    
    # Verificar escrita no diret√≥rio atual
    try:
        test_file = project_root / "test_write_permission.tmp"
        test_file.write_text("teste")
        test_file.unlink()
        results.append(("Escrita no diret√≥rio", True, "Permiss√£o ok"))
    except Exception as e:
        results.append(("Escrita no diret√≥rio", False, str(e)))
    
    # Verificar cria√ß√£o de diret√≥rios
    try:
        test_dir = project_root / "test_dir_permission"
        test_dir.mkdir(exist_ok=True)
        test_dir.rmdir()
        results.append(("Cria√ß√£o de diret√≥rios", True, "Permiss√£o ok"))
    except Exception as e:
        results.append(("Cria√ß√£o de diret√≥rios", False, str(e)))
    
    return results

def generate_report() -> Dict[str, Any]:
    """Gera relat√≥rio completo do sistema."""
    print_header("VERIFICA√á√ÉO DO SISTEMA COMPACTPDF")
    
    report = {
        'python_version': None,
        'dependencies': [],
        'project_structure': [],
        'imports': [],
        'basic_functionality': [],
        'pdf_creation': None,
        'main_cli': None,
        'permissions': [],
        'summary': {
            'total_checks': 0,
            'passed': 0,
            'failed': 0,
            'success_rate': 0.0
        }
    }
    
    # 1. Verificar Python
    print_header("1. Vers√£o do Python", "-")
    status, details = check_python_version()
    print_check("Vers√£o do Python", status, details)
    report['python_version'] = (status, details)
    
    # 2. Verificar depend√™ncias
    print_header("2. Depend√™ncias", "-")
    deps = check_dependencies()
    for name, status, details in deps:
        print_check(f"Depend√™ncia: {name}", status, details)
    report['dependencies'] = deps
    
    # 3. Verificar estrutura do projeto
    print_header("3. Estrutura do Projeto", "-")
    structure = check_project_structure()
    for path, status, details in structure:
        print_check(f"Caminho: {path}", status, details)
    report['project_structure'] = structure
    
    # 4. Verificar imports
    print_header("4. Imports do Projeto", "-")
    imports = check_imports()
    for name, status, details in imports:
        print_check(f"Import: {name}", status, details)
    report['imports'] = imports
    
    # 5. Testar funcionalidades b√°sicas
    print_header("5. Funcionalidades B√°sicas", "-")
    functionality = test_basic_functionality()
    for name, status, details in functionality:
        print_check(f"Teste: {name}", status, details)
    report['basic_functionality'] = functionality
    
    # 6. Testar cria√ß√£o de PDF
    print_header("6. Cria√ß√£o de PDF", "-")
    pdf_status, pdf_details = test_pdf_creation()
    print_check("Cria√ß√£o de PDF", pdf_status, pdf_details)
    report['pdf_creation'] = (pdf_status, pdf_details)
    
    # 7. Testar CLI principal
    print_header("7. Interface CLI", "-")
    cli_status, cli_details = test_main_cli()
    print_check("Carregamento da CLI", cli_status, cli_details)
    report['main_cli'] = (cli_status, cli_details)
    
    # 8. Verificar permiss√µes
    print_header("8. Permiss√µes do Sistema", "-")
    perms = check_permissions()
    for name, status, details in perms:
        print_check(f"Permiss√£o: {name}", status, details)
    report['permissions'] = perms
    
    # Calcular sum√°rio
    all_checks = []
    all_checks.append(report['python_version'][0])
    all_checks.extend([x[1] for x in report['dependencies']])
    all_checks.extend([x[1] for x in report['project_structure']])
    all_checks.extend([x[1] for x in report['imports']])
    all_checks.extend([x[1] for x in report['basic_functionality']])
    all_checks.append(report['pdf_creation'][0])
    all_checks.append(report['main_cli'][0])
    all_checks.extend([x[1] for x in report['permissions']])
    
    total = len(all_checks)
    passed = sum(all_checks)
    failed = total - passed
    success_rate = (passed / total) * 100 if total > 0 else 0
    
    report['summary'] = {
        'total_checks': total,
        'passed': passed,
        'failed': failed,
        'success_rate': success_rate
    }
    
    return report

def print_summary(report: Dict[str, Any]) -> None:
    """Imprime sum√°rio final."""
    print_header("SUM√ÅRIO FINAL")
    
    summary = report['summary']
    
    print(f"üìä Total de verifica√ß√µes: {summary['total_checks']}")
    print(f"‚úÖ Passou: {summary['passed']}")
    print(f"‚ùå Falhou: {summary['failed']}")
    print(f"üìà Taxa de sucesso: {summary['success_rate']:.1f}%")
    
    if summary['success_rate'] >= 90:
        print("\\nüéâ SISTEMA EST√Å FUNCIONANDO PERFEITAMENTE!")
        print("‚úÖ Todos os componentes principais est√£o operacionais")
        print("üöÄ Voc√™ pode usar todas as funcionalidades do CompactPDF")
    elif summary['success_rate'] >= 70:
        print("\\n‚ö†Ô∏è SISTEMA EST√Å FUNCIONANDO COM ALGUMAS LIMITA√á√ïES")
        print("‚úÖ Componentes principais est√£o funcionando")
        print("üí° Algumas funcionalidades avan√ßadas podem estar indispon√≠veis")
    else:
        print("\\n‚ùå SISTEMA TEM PROBLEMAS S√âRIOS")
        print("üîß V√°rias verifica√ß√µes falharam")
        print("üí° Revise a instala√ß√£o e depend√™ncias")
    
    # Recomenda√ß√µes
    print("\\nüí° PR√ìXIMOS PASSOS:")
    
    if summary['failed'] > 0:
        print("1. üì¶ Reinstalar depend√™ncias: pip install -r requirements.txt --force-reinstall")
        print("2. üêç Verificar vers√£o do Python (requer 3.9+)")
        print("3. üìÅ Verificar estrutura do projeto")
        print("4. üîß Verificar permiss√µes de arquivo")
    
    print("5. üöÄ Executar demonstra√ß√£o: python demo.py")
    print("6. üìñ Ler documenta√ß√£o: docs/GETTING_STARTED.md")
    print("7. üß™ Executar exemplos: python examples/usage_examples.py")

def print_recommendations() -> None:
    """Imprime recomenda√ß√µes de uso."""
    print_header("RECOMENDA√á√ïES DE USO")
    
    print("üöÄ Para come√ßar rapidamente:")
    print("   python demo.py")
    print()
    print("üìÑ Para comprimir um PDF:")
    print("   python main.py meu_documento.pdf")
    print()
    print("‚ö° Para m√°ximo desempenho:")
    print("   python main.py documento.pdf --cache --backup --analytics")
    print()
    print("üìö Para aprender mais:")
    print("   üìñ docs/GETTING_STARTED.md - Guia de in√≠cio")
    print("   üìñ docs/USER_GUIDE.md - Manual completo")
    print("   üß™ examples/advanced_usage.py - Exemplos avan√ßados")

def main():
    """Fun√ß√£o principal."""
    try:
        # Gerar relat√≥rio completo
        report = generate_report()
        
        # Imprimir sum√°rio
        print_summary(report)
        
        # Imprimir recomenda√ß√µes
        print_recommendations()
        
        # C√≥digo de sa√≠da baseado na taxa de sucesso
        success_rate = report['summary']['success_rate']
        if success_rate >= 90:
            return 0  # Tudo ok
        elif success_rate >= 70:
            return 1  # Problemas menores
        else:
            return 2  # Problemas s√©rios
            
    except Exception as e:
        print_header("ERRO CR√çTICO")
        print(f"‚ùå Erro inesperado durante verifica√ß√£o: {e}")
        print("\\nüîç Detalhes do erro:")
        traceback.print_exc()
        return 3

if __name__ == '__main__':
    sys.exit(main())
