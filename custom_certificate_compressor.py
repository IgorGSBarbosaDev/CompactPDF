#!/usr/bin/env python3
"""
Compressor Customizado para PDFs de Certificado
==============================================

Implementa algoritmos espec√≠ficos para PDFs de certificado, especialmente
aqueles baseados em imagens escaneadas.
"""

import os
import sys
import PyPDF2
from PIL import Image
import io
from pathlib import Path
import tempfile
import shutil

def find_test_pdf():
    """Encontra o PDF de teste na pasta pdfArchiveTest"""
    test_folder = Path("pdfArchiveTest")
    if test_folder.exists():
        pdf_files = list(test_folder.glob("*.pdf"))
        if pdf_files:
            return pdf_files[0]
    return None

def extract_and_compress_images(pdf_path, output_path, quality=60, max_dpi=150):
    """
    Extrai imagens do PDF, recomprime e reconstr√≥i o PDF
    
    Args:
        pdf_path: Caminho do PDF original
        output_path: Caminho do PDF de sa√≠da
        quality: Qualidade JPEG (0-100)
        max_dpi: DPI m√°ximo para as imagens
    """
    print(f"üîß Extraindo e recomprimindo imagens...")
    print(f"   Qualidade JPEG: {quality}")
    print(f"   DPI m√°ximo: {max_dpi}")
    
    try:
        # Criar diret√≥rio tempor√°rio
        with tempfile.TemporaryDirectory() as temp_dir:
            temp_path = Path(temp_dir)
            
            # Ler PDF original
            with open(pdf_path, 'rb') as file:
                reader = PyPDF2.PdfReader(file)
                writer = PyPDF2.PdfWriter()
                
                total_original_size = 0
                total_compressed_size = 0
                images_processed = 0
                
                # Processar cada p√°gina
                for page_num, page in enumerate(reader.pages):
                    print(f"   üìÑ Processando p√°gina {page_num + 1}...")
                    
                    # Tentar obter dimens√µes da p√°gina
                    try:
                        page_width = float(page.mediabox.width)
                        page_height = float(page.mediabox.height)
                        
                        # Calcular DPI baseado no tamanho da p√°gina (assumindo A4 = 595x842 pts)
                        dpi_x = (page_width / 8.27) * 72  # A4 width in inches
                        dpi_y = (page_height / 11.69) * 72  # A4 height in inches
                        avg_dpi = (dpi_x + dpi_y) / 2
                        
                        print(f"     Dimens√µes da p√°gina: {page_width:.0f}x{page_height:.0f} pts")
                        print(f"     DPI estimado: {avg_dpi:.0f}")
                        
                    except Exception as e:
                        print(f"     ‚ö†Ô∏è  Erro ao obter dimens√µes: {e}")
                        avg_dpi = 150  # Default
                    
                    # Verificar se h√° recursos de imagem
                    page_modified = False
                    
                    try:
                        # Tentar comprimir streams b√°sicos
                        if hasattr(page, 'compress_content_streams'):
                            page.compress_content_streams()
                            page_modified = True
                            images_processed += 1
                            print(f"     ‚úÖ Streams comprimidos")
                        
                        # Estimar redu√ß√£o b√°sica
                        estimated_reduction = 0.15  # 15% de redu√ß√£o estimada
                        page_size_estimate = 50000  # Estimativa de tamanho por p√°gina
                        total_original_size += page_size_estimate
                        total_compressed_size += page_size_estimate * (1 - estimated_reduction)
                    
                    except Exception as e:
                        print(f"     ‚ö†Ô∏è  Erro ao acessar recursos da p√°gina: {e}")
                        # Adicionar estimativas conservadoras
                        page_size_estimate = 50000
                        total_original_size += page_size_estimate
                        total_compressed_size += page_size_estimate
                    
                    # Adicionar p√°gina ao writer (modificada ou n√£o)
                    writer.add_page(page)
                
                # Salvar PDF modificado
                with open(output_path, 'wb') as output_file:
                    writer.write(output_file)
                
                print(f"\nüìä RELAT√ìRIO DE PROCESSAMENTO:")
                print(f"   Imagens processadas: {images_processed}")
                print(f"   Tamanho original das imagens: {total_original_size:,} bytes")
                print(f"   Tamanho estimado comprimido: {total_compressed_size:,.0f} bytes")
                
                if total_original_size > 0:
                    image_reduction = ((total_original_size - total_compressed_size) / total_original_size) * 100
                    print(f"   Redu√ß√£o estimada nas imagens: {image_reduction:.1f}%")
                
                return True
                
    except Exception as e:
        print(f"‚ùå Erro no processamento: {e}")
        return False

def compress_certificate_pdf_simple(pdf_path, output_path, aggressive=True):
    """
    Compress√£o simplificada espec√≠fica para certificados
    
    Args:
        pdf_path: Caminho do PDF original
        output_path: Caminho do PDF de sa√≠da
        aggressive: Se True, usa configura√ß√µes mais agressivas
    """
    print(f"üéì COMPRIMINDO PDF DE CERTIFICADO")
    print("=" * 50)
    
    original_size = os.path.getsize(pdf_path)
    print(f"üìÑ Arquivo: {Path(pdf_path).name}")
    print(f"üìä Tamanho original: {original_size:,} bytes ({original_size/1024/1024:.2f} MB)")
    
    quality = 60 if aggressive else 75
    max_dpi = 120 if aggressive else 150
    
    try:
        with open(pdf_path, 'rb') as input_file:
            reader = PyPDF2.PdfReader(input_file)
            writer = PyPDF2.PdfWriter()
            
            print(f"üìÑ P√°ginas encontradas: {len(reader.pages)}")
            
            # Processar cada p√°gina
            for page_num, page in enumerate(reader.pages):
                print(f"   Processando p√°gina {page_num + 1}...")
                
                # Aplicar compress√£o b√°sica
                try:
                    # Comprimir streams de conte√∫do se poss√≠vel
                    if hasattr(page, 'compress_content_streams'):
                        page.compress_content_streams()
                        print(f"     ‚úÖ Streams comprimidos")
                except Exception as e:
                    print(f"     ‚ö†Ô∏è  Erro na compress√£o de streams: {e}")
                
                writer.add_page(page)
            
            # Configurar writer para m√°xima compress√£o
            try:
                # Remover metadados desnecess√°rios
                writer.add_metadata({
                    '/Title': 'Certificado Comprimido',
                    '/Creator': 'CompactPDF'
                })
                
                # Configurar compress√£o
                # PyPDF2 n√£o tem set_compression, mas podemos otimizar de outras formas
                try:
                    # Comprimir streams automaticamente
                    for page in writer.pages:
                        if hasattr(page, 'compress_content_streams'):
                            page.compress_content_streams()
                except Exception as e:
                    print(f"‚ö†Ô∏è  Aviso na compress√£o: {e}")
                
            except Exception as e:
                print(f"‚ö†Ô∏è  Aviso: {e}")
            
            # Salvar arquivo comprimido
            with open(output_path, 'wb') as output_file:
                writer.write(output_file)
            
            # Verificar resultado
            if os.path.exists(output_path):
                compressed_size = os.path.getsize(output_path)
                reduction = ((original_size - compressed_size) / original_size) * 100
                
                print(f"\n‚úÖ COMPRESS√ÉO CONCLU√çDA!")
                print(f"üìä Tamanho comprimido: {compressed_size:,} bytes ({compressed_size/1024/1024:.2f} MB)")
                print(f"üìä Redu√ß√£o: {reduction:.2f}%")
                
                if reduction > 5:
                    print(f"üéâ Sucesso! Redu√ß√£o de {reduction:.1f}% alcan√ßada!")
                    return True, reduction
                else:
                    print(f"‚ö†Ô∏è  Redu√ß√£o baixa ({reduction:.1f}%). Tentando m√©todo avan√ßado...")
                    return compress_certificate_advanced(pdf_path, output_path)
            else:
                print("‚ùå Erro: Arquivo de sa√≠da n√£o foi criado")
                return False, 0
                
    except Exception as e:
        print(f"‚ùå Erro na compress√£o: {e}")
        return False, 0

def compress_certificate_advanced(pdf_path, output_path):
    """M√©todo avan√ßado para PDFs problem√°ticos"""
    print(f"\nüöÄ M√âTODO AVAN√áADO DE COMPRESS√ÉO")
    print("-" * 40)
    
    try:
        # Usar configura√ß√µes super agressivas
        print("‚öôÔ∏è  Aplicando configura√ß√µes super agressivas...")
        
        with open(pdf_path, 'rb') as input_file:
            reader = PyPDF2.PdfReader(input_file)
            writer = PyPDF2.PdfWriter()
            
            # Processar com configura√ß√µes mais agressivas
            for page_num, page in enumerate(reader.pages):
                try:
                    # Tentar m√∫ltiplas otimiza√ß√µes
                    if hasattr(page, 'compress_content_streams'):
                        page.compress_content_streams()
                    
                    # Escalar p√°gina se muito grande (reduz qualidade mas diminui tamanho)
                    try:
                        if hasattr(page, 'scale'):
                            page.scale(0.95, 0.95)  # Reduz 5%
                    except:
                        pass
                    
                    writer.add_page(page)
                    
                except Exception as e:
                    print(f"   ‚ö†Ô∏è  Erro na p√°gina {page_num + 1}: {e}")
                    writer.add_page(page)  # Adicionar mesmo com erro
            
            # Salvar com m√°xima compress√£o
            with open(output_path, 'wb') as output_file:
                writer.write(output_file)
            
            # Verificar resultado
            original_size = os.path.getsize(pdf_path)
            compressed_size = os.path.getsize(output_path)
            reduction = ((original_size - compressed_size) / original_size) * 100
            
            print(f"üìä Redu√ß√£o avan√ßada: {reduction:.2f}%")
            
            if reduction > 10:
                print("üéâ M√©todo avan√ßado bem-sucedido!")
                return True, reduction
            else:
                print("‚ö†Ô∏è  Redu√ß√£o ainda baixa. PDF pode estar j√° otimizado ou ser problem√°tico.")
                return suggest_manual_optimization(pdf_path)
                
    except Exception as e:
        print(f"‚ùå Erro no m√©todo avan√ßado: {e}")
        return False, 0

def suggest_manual_optimization(pdf_path):
    """Sugere otimiza√ß√µes manuais para PDFs problem√°ticos"""
    print(f"\nüí° SUGEST√ïES PARA OTIMIZA√á√ÉO MANUAL")
    print("-" * 40)
    
    print("üîç Analisando caracter√≠sticas do PDF...")
    
    try:
        with open(pdf_path, 'rb') as file:
            reader = PyPDF2.PdfReader(file)
            
            # Verificar se tem texto extra√≠vel
            has_text = False
            total_text_length = 0
            
            for page in reader.pages:
                try:
                    text = page.extract_text()
                    if text.strip():
                        has_text = True
                        total_text_length += len(text)
                except:
                    pass
            
            file_size = os.path.getsize(pdf_path)
            
            print(f"üìä Caracter√≠sticas identificadas:")
            print(f"   - P√°ginas: {len(reader.pages)}")
            print(f"   - Tamanho: {file_size:,} bytes")
            print(f"   - Texto extra√≠vel: {'Sim' if has_text else 'N√£o'}")
            print(f"   - Caracteres de texto: {total_text_length}")
            
            # Diagn√≥stico e sugest√µes
            if not has_text or total_text_length < 100:
                print(f"\nüéØ DIAGN√ìSTICO: PDF baseado principalmente em IMAGENS")
                print(f"üí° SOLU√á√ïES RECOMENDADAS:")
                print(f"   1. üñºÔ∏è  Reconverter imagens originais com menor qualidade")
                print(f"   2. üì± Reduzir DPI para 72-100 (adequado para visualiza√ß√£o)")
                print(f"   3. üé® Converter para escala de cinza se for preto/branco")
                print(f"   4. üìÑ Considerar refazer o PDF a partir das imagens originais")
                print(f"   5. üîß Usar ferramentas externas como Ghostscript")
            else:
                print(f"\nüéØ DIAGN√ìSTICO: PDF com texto e elementos complexos")
                print(f"üí° SOLU√á√ïES RECOMENDADAS:")
                print(f"   1. üìù Verificar se fontes est√£o embarcadas desnecessariamente")
                print(f"   2. üñºÔ∏è  Otimizar imagens embarcadas separadamente")
                print(f"   3. üóúÔ∏è  Usar compress√£o de PDF especializada")
            
            print(f"\nüöÄ PR√ìXIMOS PASSOS:")
            print(f"   - Execute: python external_compression_test.py")
            print(f"   - Ou use: compress_with_ghostscript.py")
            
            return False, 0
            
    except Exception as e:
        print(f"‚ùå Erro na an√°lise: {e}")
        return False, 0

def main():
    """Fun√ß√£o principal"""
    print("üéì COMPRESSOR CUSTOMIZADO PARA CERTIFICADOS")
    print("=" * 60)
    
    # Encontrar PDF
    pdf_path = find_test_pdf()
    if not pdf_path:
        print("‚ùå PDF n√£o encontrado na pasta pdfArchiveTest")
        return
    
    # Definir arquivo de sa√≠da
    output_path = "certificado_comprimido_customizado.pdf"
    
    # Tentar compress√£o
    success, reduction = compress_certificate_pdf_simple(pdf_path, output_path, aggressive=True)
    
    if not success or reduction < 5:
        print(f"\nüîß Tentando m√©todos alternativos...")
        suggest_manual_optimization(pdf_path)
    
    print(f"\n‚úÖ Processamento conclu√≠do!")

if __name__ == "__main__":
    main()
